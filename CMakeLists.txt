#
# This example CMake file shows how to integrate Blech source code into
# your CMake build.
#
# Basically, the Blech compiler is executed by CMake in order to generate
# the corresponding C sources. The latter are then included in the usual
# C build flow for creating the executable binary.
#

cmake_minimum_required(VERSION 3.14)
project(BlechCMakeDemo)

#
# The C application part.
# -----------------------
#

# Name of the final C executable.
set(EXEC blc-demo)

add_executable(${EXEC} main.c)

target_include_directories(${EXEC} PRIVATE inc)

#
# The Blech application part.
# ---------------------------
#

# Name of the main Blech source file,
# e.g. 'control.blc'
set(BLC_MAIN control.blc)

# File name without directory or last extension,
# e.g. 'control'
get_filename_component(BLC_MAIN_WOE ${BLC_MAIN} NAME_WLE)

# Directory of the C files generated by the Blech compiler.
set(BLC_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/blech)

# C files generated by the Blech compiler,
# e.g. 'control.c' and 'control.h'
set(BLC_OUTPUT_FILES
    ${BLC_OUTPUT_DIR}/${BLC_MAIN_WOE}.c
    ${BLC_OUTPUT_DIR}/${BLC_MAIN_WOE}.h
)

# Custom command to run the Blech compiler.
add_custom_command(
    OUTPUT ${BLC_OUTPUT_FILES}
    COMMAND blechc --project-dir ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${BLC_MAIN}
    COMMENT "blechc: compiling ${BLC_MAIN}"
    DEPENDS ${BLC_MAIN}
)

# Add additional include directories (related to Blech) to the C binary,
# e.g. for 'control.h'
target_include_directories(${EXEC} PRIVATE
    ${CMAKE_CURRENT_BINARY_DIR}
)

# Add the output of the Blech compiler as additional sources to the C binary.
# This makes the C application part dependent on the Blech part.
target_sources(${EXEC} PRIVATE ${BLC_OUTPUT_FILES})


